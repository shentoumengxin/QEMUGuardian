#!/usr/bin/env bpftrace
BEGIN {
    // Start monitoring event
    printf("{\"ts\":%llu,\"event\": \"START\", \"message\": \"Dynamic QEMU-user monitor started\"}\n",nsecs/1000000000ULL);
}

// (1) When a process with name starting "qemu-" calls openat, add its PID to monitored list
tracepoint:syscalls:sys_enter_openat 
/ strncmp(comm, "qemu-", 5) == 0 /
{
    @monitored[pid] = 1;
    // Track file open by QEMU-user process
    printf("{\"ts\":%llu,\"event\": \"TRACK_OPENAT\", \"pid\": %d, \"bin\": \"%s\", \"file\": \"%s\"}\n",nsecs/1000000000ULL,
           pid, comm, str(args->filename));
}

// When a monitored process forks (fork/clone/vfork), add the child PID to monitored list
tracepoint:sched:sched_process_fork 
/ @monitored[args->parent_pid] /
{
    @monitored[args->child_pid] = 1;
    // Track fork event
    printf("{\"ts\":%llu,\"event\": \"TRACK_FORK\", \"parent\": %d, \"child\": %d}\n",nsecs/1000000000ULL,
           args->parent_pid, args->child_pid);
}

// (3) Also track execve: if a QEMU-user process executes /usr/bin/qemu-x86_64, mark it as monitored
tracepoint:syscalls:sys_enter_execve
/ @monitored[pid] /
{
    /* still monitored after exec */
    printf("{\"ts\":%llu,\"event\":\"EXEC\",\"pid\":%d,\"filename\":\"%s\"}\n",
           nsecs/1000000000ULL, pid, str(args->filename));
}
//(4)If a process with name starting "qemu-" calls execve with /usr/bin/qemu-x86_64, mark it as monitored

tracepoint:sched:sched_process_exec 
/ strncmp(comm, "qemu-", 5) == 0 /        /*comm new name */
{
    @monitored[pid] = 1;
    printf("{\"ts\":%llu,\"event\":\"TRACK_QEMU\",\"pid\":%d,\"bin\":\"%s\"}\n",
           nsecs/1000000000ULL, pid, comm);
}

// All subsequent probes only apply to PIDs in @monitored
// ─── 1) Monitor setuid() calls ─────────────────────────────────────────────
tracepoint:syscalls:sys_enter_setuid
/ @monitored[pid] /
{
    printf("{\"ts\":%llu,\"event\":\"SETUID\",\"pid\":%d,\"uid\":%d}\n",
           nsecs/1000000000ULL, pid, args->uid);
}

// ─── 2) Monitor mprotect() calls ───────────────────────────────────────────
tracepoint:syscalls:sys_enter_mprotect
/ @monitored[pid] /
{
    $p = args->prot;
    printf("{\"ts\":%llu,\"event\":\"MPROTECT\",\"pid\":%d,\"read\":%d,\"write\":%d,\"exec\":%d}\n",
           nsecs/1000000000ULL, pid,
           ($p & 1)  ? 1 : 0,   // PROT_READ
           ($p & 2)  ? 1 : 0,   // PROT_WRITE
           ($p & 4)  ? 1 : 0);  // PROT_EXEC
}

// ─── 3) Monitor madvise() calls ────────────────────────────────────────────
tracepoint:syscalls:sys_enter_mprotect
/ @monitored[pid] /
{
    $p = args->prot;
    // 分别输出三个标志位，1 表示设置了该权限，0 表示没有
    printf("{\"ts\":%llu,\"event\":\"MPROTECT\",\"pid\":%d,\"read\":%d,\"write\":%d,\"exec\":%d}\n",
           nsecs/1000000000ULL, pid,
           ($p & 1)  ? 1 : 0,   // PROT_READ
           ($p & 2)  ? 1 : 0,   // PROT_WRITE
           ($p & 4)  ? 1 : 0);  // PROT_EXEC
}


// Capture read() syscalls in monitored processes (print buffer content)
tracepoint:syscalls:sys_enter_read 
/ @monitored[pid] /
{
    printf("{\"ts\":%llu,\"event\": \"READ\", \"pid\": %d, \"fd\": %d, \"buf\": \"%s\"}\n",nsecs/1000000000ULL,
           pid, args->fd, str(args->buf));
}

// Capture write() syscalls in monitored processes (print buffer content)
tracepoint:syscalls:sys_enter_write 
/ @monitored[pid] /
{
    printf("{\"ts\":%llu,\"event\": \"WRITE\", \"pid\": %d, \"fd\": %d, \"buf\": \"%s\"}\n",nsecs/1000000000ULL,
           pid, args->fd, str(args->buf));
}

// If a monitored process calls readlinkat on /proc/self/cwd (get current working directory)
tracepoint:syscalls:sys_enter_readlinkat 
/ @monitored[pid] && str(args->pathname) == "/proc/self/cwd" /
{
    printf("{\"ts\":%llu,\"event\": \"READLINKAT\", \"pid\": %d, \"path\": \"%s\"}\n",nsecs/1000000000ULL,
           pid, str(args->pathname));
}

// Capture socket() calls by monitored processes (domain and type)
tracepoint:syscalls:sys_enter_socket 
/ @monitored[pid] /
{
    printf("{\"ts\":%llu,\"event\": \"SOCKET\", \"pid\": %d, \"domain\": %d, \"type\": %d}\n",nsecs/1000000000ULL,
           pid, args->family, args->type);
}

// Capture connect() calls by monitored processes (destination address)
tracepoint:syscalls:sys_enter_connect 
/ @monitored[pid] /
{
    printf("{\"ts\":%llu,\"event\": \"CONNECT\", \"pid\": %d, \"addr\": \"%s\"}\n",nsecs/1000000000ULL,
           pid, str(args->uservaddr));
}

// Capture sendto() calls by monitored processes (length of data sent)
tracepoint:syscalls:sys_enter_sendto 
/ @monitored[pid] /
{
    printf("{\"ts\":%llu,\"event\": \"SENDTO\", \"pid\": %d, \"len\": %d}\n",nsecs/1000000000ULL,
           pid, args->len);
}

// Capture recvfrom() calls by monitored processes (buffer size to receive)
tracepoint:syscalls:sys_enter_recvfrom 
/ @monitored[pid] /
{
    printf("{\"ts\":%llu,\"event\": \"RECVFROM\", \"pid\": %d, \"size\": %d}\n",nsecs/1000000000ULL,
           pid, args->size);
}



/* -------- free / alloc plain counters -------- */
uprobe:/lib/x86_64-linux-gnu/libc.so.6:free     /@monitored[pid] && arg0 != 0/  { @free_cnt  ++; }
uprobe:/lib/x86_64-linux-gnu/libc.so.6:malloc   /@monitored[pid] && arg0  > 0 /  { @alloc_cnt ++; }
uprobe:/lib/x86_64-linux-gnu/libc.so.6:calloc   /@monitored[pid] && (arg0*arg1)>0/ { @alloc_cnt ++; }
uprobe:/lib/x86_64-linux-gnu/libc.so.6:realloc  /@monitored[pid] && arg1  > 0 /  { @alloc_cnt ++; }

/* -------- mmap plain counters -------- */
tracepoint:syscalls:sys_enter_mmap
/ @monitored[pid] /
{
    @mmap_total++;                       // total count ++

    $pages = args->len / 4096;
    $cur   = @mmap_max;               // read current max (0 if not set)
    if ($pages > $cur) {
        @mmap_max = $pages;           // update max
    }
}


interval:s:1
{
    /* FREE_SUM */
    if (@free_cnt) {
        printf("{\"ts\":%llu,\"pid\":-1,\"evt\":\"FREE_SUM\",\"meta\":{\"count\":%llu}}\n",
               nsecs/1000000000ULL, @free_cnt);
    }
    clear(@free_cnt);

    /* MMAP_SUM */
    if (@mmap_total) {
        printf("{\"ts\":%llu,\"pid\":-1,\"evt\":\"MMAP_SUM\",\"meta\":{\"count\":%llu,\"max_pages\":%llu}}\n",
               nsecs/1000000000ULL, @mmap_total, @mmap_max);
    }
    clear(@mmap_total);
    clear(@mmap_max);

    /* ALLOC_SUM */
    if (@alloc_cnt) {
       printf("{\"ts\":%llu,\"pid\":-1,\"evt\":\"ALLOC_SUM\",\"meta\":{\"count\":%llu}}\n",
       nsecs/1000000000ULL, @alloc_cnt);
    }
    clear(@alloc_cnt);
}



// Capture dup2() calls in monitored processes (old and new file descriptors)
tracepoint:syscalls:sys_enter_dup2 
/ @monitored[pid] /
{
    printf("{\"ts\":%llu,\"event\": \"DUP2\", \"pid\": %d, \"oldfd\": %d, \"newfd\": %d}\n",nsecs/1000000000ULL,
           pid, args->oldfd, args->newfd);
}

// Capture wait4() return in monitored processes (child process reaped)
tracepoint:syscalls:sys_exit_wait4 
/ @monitored[pid] /
{
    printf("{\"ts\":%llu,\"event\": \"WAIT4_EXITED\", \"pid\": %d, \"reaped_child\": %d}\n",nsecs/1000000000ULL,
           pid, args->ret);
}

// Capture context switches involving monitored processes (task out/in)
tracepoint:sched:sched_switch 
/ @monitored[args->prev_pid] || @monitored[args->next_pid] /
{
    printf("{\"ts\":%llu,\"event\": \"SCHED_SWITCH\", \"prev_pid\": %d, \"next_pid\": %d}\n",nsecs/1000000000ULL,
           args->prev_pid, args->next_pid);
}

// Capture signals generated for monitored processes
tracepoint:signal:signal_generate 
/ @monitored[args->pid] /
{
    printf("{\"ts\":%llu,\"event\": \"SIGNAL_GENERATE\", \"pid\": %d, \"sig\": %d}\n",nsecs/1000000000ULL,
           args->pid, args->sig);
}

END {
    // End monitoring event
    printf("{\"ts\":%llu,\"event\": \"END\", \"message\": \"Dynamic QEMU-user monitor stopped\"}\n",nsecs/1000000000ULL);
}
